{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","boy","girl","gender","setGender","startButton","setStartButton","radioValue","setRadioValue","submitState","setSubmitState","favoriteNumber","setFavoriteNumber","radioButtonArray","handleNumberClick","event","favNum","target","value","numberButtons","map","num","key","onClick","handleRadioButton","newradioButtons","radioButton","type","onChange","checked","htmlFor","for","setRadioButtons","rb","radioButtons","handleBoyGirlButton","e","name","style","textAlign","className","listStyleType","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57450937.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const[gender, setGender] = useState({boy: false, girl: false})\n  const[startButton, setStartButton] = useState(true)\n  const[radioValue, setRadioValue] = useState({})\n  const[submitState, setSubmitState] = useState(false)\n  const[favoriteNumber, setFavoriteNumber] = useState()\n  const[radioButtonArray] = useState([\n    \"Hugs and Kisses\", \"High Fives\", \"Say Hi!\", \"Say Bonjour!\"\n  ])\n\n  const numbers = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const resultsMessage = [ 'Worst', 'Super Duper Bad', 'Super Bad', 'Bad', 'Ok', 'Not Bad' , 'Awesome', 'Great', 'Outstanding' ]\n\n  \n  const handleSubmit = () => {\n    setSubmitState(true)\n  }\n\n  const handleNumberClick = (event) => {\n    const favNum = event.target.value\n    setFavoriteNumber(favNum)\n  }\n\n  let numberButtons = numbers.map(num => {\n    return <button key={num} value={num} onClick={handleNumberClick}>{num}</button>\n  })\n\n  const handleRadioButton = (event) => {\n    let value = event.target.value\n    const newradioButtons = radioButtonArray.map(radioButton => {\n      let newRadioButton\n      if (value !== radioButton) {\n        newRadioButton = <li>\n          <input key={radioButton} type=\"radio\" value={radioButton} onChange={handleRadioButton} checked={false} />\n          <label key={radioButton + 'key'}  htmlFor={radioButton}>{radioButton}</label>\n        </li>\n      }\n      else {\n        newRadioButton = <li>\n          <input key={radioButton} type=\"radio\" value={radioButton} onChange={handleRadioButton} checked={true} />\n          <label key={radioButton + 'key'} for={radioButton}>{radioButton}</label>\n        </li>\n      }\n      return newRadioButton\n\n    })\n    setRadioValue(value)\n    setRadioButtons(newradioButtons)\n  }\n\n  const rb = radioButtonArray.map(radioButton => {\n    return (\n      <li>\n        <input type=\"radio\" value={radioButton} onClick={handleRadioButton} />\n        <label for={radioButton}>{radioButton}</label>\n      </li>\n    )\n  })\n  const [radioButtons, setRadioButtons] = useState(rb)\n\n  const restartGame = () => {\n    setStartButton(true)\n    setGender({ boy: false, girl: false })\n    setSubmitState(false)\n    setFavoriteNumber()\n  }\n\n  const startButtonHandler = () => {\n    setStartButton(false)\n  }\n\n  const handleBoyGirlButton = (e) => {\n      let name = e.target.name\n    setGender({[name]: true})\n  }\n\n\n  const style = { textAlign: 'center' }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        {startButton && <div style={style}>\n          <h3> About You\n            <br/>\n          </h3><button  onClick={startButtonHandler}>Push</button>\n          </div>\n        }\n        <br/>\n\n        {!startButton && !gender.boy && !gender.girl &&\n          <div style={style}>\n            <h3>Are you a boy or a girl?</h3>\n            \n          <button name=\"boy\" onClick={handleBoyGirlButton}>Boy</button>\n          <button name=\"girl\" onClick={handleBoyGirlButton}>Girl</button>\n          </div>         \n        }\n\n        {(gender.boy === true || gender.girl === true) && !startButton && !submitState &&\n          <div style={style}>\n            <h3>What Kind of Greeting Do you Like?</h3>\n            <ul style={{ textAlign: 'left', listStyleType: 'none'}}>\n              {radioButtons}\n            </ul>\n            <button onClick={handleSubmit}> Submit </button>\n          </div>\n        }\n\n        {(gender.boy === true || gender.girl === true) && !startButton && submitState && !favoriteNumber &&\n          <div style={style}>\n            <h3>What Is Your Favorite Number? </h3>\n              {numberButtons}\n          </div>\n        }\n        {(gender.boy === true || gender.girl === true) && !startButton && submitState && favoriteNumber &&\n          <div style={style}>\n            <h3>Results!</h3>\n            <h5> Gender: {gender.boy === true && <>Boy</>} {gender.girl === true && <>Girl</>}</h5>\n            <h5>What Kind of Greeting Do you Like? {radioValue}</h5>\n          <h5>Score: {resultsMessage[favoriteNumber - 1]}</h5>\n          </div>\n        }\n\n          <br></br>\n          <br></br>\n        <button onClick={restartGame}> Restart Game</button> \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}